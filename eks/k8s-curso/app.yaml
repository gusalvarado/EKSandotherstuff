apiVersion: apps/v1
kind: Deployment
metadata:
  name: python-app
spec:
  replicas: 1  # Opcional (Default: 1)
  selector:
    matchLabels:
      app: python-app  # Requerido
  template:
    metadata:
      labels:
        app: python-app  # Requerido
    spec:
      serviceAccountName: python-app-sa  # Asigna la ServiceAccount aquí
      containers:
      - name: python-container
        image: my-python-app  # Requerido, imagen base
        imagePullPolicy: IfNotPresent
        command: ["python", "/app/app.py"]  # Requerido, ejecuta el código
        ports:
          - containerPort: 5000  # Requerido, puerto interno del contenedor
        env:
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: python-secrets  #  Requerido
              key: SECRET_KEY
        - name: CONFIG_VALUE
          valueFrom:
            configMapKeyRef:
              name: python-config  #  Requerido
              key: CONFIG_VALUE
        resources: # Opcional, si no se especifica, un pod puede utilizar todos los recursos de un nodo
            requests: #Opcional - recursos garantizados
              cpu: "250m"   # 0.25 CPU (250 millicores)
              memory: "128Mi"  # 128 MB de RAM
            limits: # Opcional, maximo de recursos que puede utilizar
              cpu: "500m"   # 0.5 CPU (500 millicores)
              memory: "256Mi"  # 256 MB de RAM:

        volumeMounts:
        - name: config-volume
          mountPath: "/app"  #  Requerido, ruta en el contenedor
        - name: image-storage
          mountPath: "/images"  #  Requerido, volumen de imágenes

      volumes:
      - name: config-volume
        configMap:
          name: python-config  #  Requerido
          items:
          - key: app.py
            path: app.py  #  Requerido, se monta el script en /app/app.py
      - name: image-storage
        persistentVolumeClaim:
          claimName: image-storage-pvc  #  Requerido, usa el PVC
---
apiVersion: v1
kind: Service
metadata:
  name: python-service
spec:
  selector:
    app: python-app  #  Requerido, debe coincidir con el deployment
  ports:
  - protocol: TCP  #  Requerido
    port: 80  #  Requerido, puerto externo del servicio
    targetPort: 5000  #  Requerido, puerto interno del contenedor
  type: ClusterIP  #  Opcional, default: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: python-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: "/"  #  Opcional, reescribe URL
spec:
  rules:
  - host: python-app.local  #  Opcional, cambiar según el dominio
    http:
      paths:
      - path: /
        pathType: Prefix  #  Requerido
        backend:
          service:
            name: python-service  #  Requerido, debe coincidir con el Service
            port:
              number: 80  #  Requerido, debe coincidir con el Service
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: python-config
data:
  app.py: |
    from flask import Flask, send_file, jsonify
    from kubernetes import client, config
    import os

    app = Flask(__name__)

    @app.route("/")
    def home():
        secret_value = os.getenv("SECRET_KEY", "default_secret")
        config_value = os.getenv("CONFIG_VALUE", "default_config")
        return f"""
    <html>
        <head>
            <title>Python App</title>
            <style>
                body {{
                    text-align: center;
                    font-family: Arial, sans-serif;
                    background: linear-gradient(135deg, #245DEC, #9F5EFF);
                    color: white;
                    height: 100vh;
                    display: flex;
                    flex-direction: column;
                    justify-content: center;
                    align-items: center;
                }}
                .container {{
                    background: rgba(255, 255, 255, 0.1);
                    padding: 30px;
                    border-radius: 15px;
                    box-shadow: 0 0 15px rgba(255, 255, 255, 0.2);
                }}
                h1 {{
                    font-size: 50px;
                    font-weight: bold;
                    text-shadow: 3px 3px 5px rgba(0, 0, 0, 0.3);
                    color: #ffffff;
                }}
                h2 {{
                    font-size: 28px;
                    margin: 10px 0;
                    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
                    color: #ffffff;
                }}
                .highlight {{
                    color: black;  /* Letras negras */
                    font-weight: bold;
                }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>Hello from <span class="highlight">Python App!</span></h1>
                <h2>Secret: <span class="highlight">{secret_value}</span></h2>
                <h2>Config: <span class="highlight">{config_value}</span></h2>
            </div>
        </body>
    </html>
    """

    @app.route("/image")
    def get_image():
        image_path = "/images/uploaded_image.jpg"  # Ruta esperada en el volumen
        if os.path.exists(image_path):
            return send_file(image_path, mimetype="image/jpeg")
        else:
            return "No image found", 404

    # Cargar configuración dentro del clúster
    config.load_incluster_config()

    @app.route("/pods")
    def list_pods():
      v1 = client.CoreV1Api()
      pods = v1.list_namespaced_pod(namespace="default")
      return jsonify([pod.metadata.name for pod in pods.items])

    @app.route("/services")
    def list_services():
        v1 = client.CoreV1Api()
        services = v1.list_namespaced_service(namespace="default")

        # Extraer nombres y direcciones de los servicios
        service_list = [
            {
                "name": svc.metadata.name,
                "cluster_ip": svc.spec.cluster_ip,
                "ports": [{"port": p.port, "protocol": p.protocol} for p in svc.spec.ports]
            }
            for svc in services.items
        ]

        return jsonify(service_list)
    @app.route("/secrets")
    def list_secrets():
        v1 = client.CoreV1Api()
        secrets = v1.list_namespaced_secret(namespace="default")

        secret_names = [secret.metadata.name for secret in secrets.items]
        return jsonify({"secrets": secret_names})


    if __name__ == "__main__":
        app.run(host="0.0.0.0", port=5000)

  CONFIG_VALUE: "CLICLI ;)"  # Opcional
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: image-storage-pv
spec:
  storageClassName: local # Requerido, storage local del nodo
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteOnce  #  Requerido
  hostPath:
    path: "/mnt/data/"  #  Requerido, ubicación en el host (para Minikube)
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: image-storage-pvc
spec:
  accessModes:
    - ReadWriteOnce  #  Requerido
  resources:
    requests:
      storage: 50Mi  #  Requerido: Tamaño del almacenamiento solicitado
  volumeName: image-storage-pv
  storageClassName: local # Requerido: para que coincida con nuestro PV
---
apiVersion: v1
kind: Secret
metadata:
  name: python-secrets
type: Opaque
data:
  SECRET_KEY: S3ViZXJuZXRlcyBleHBlcnQ=  #  Requerido si se usa en Deployment (Base64)
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: python-app-role
  namespace: default
rules:
- apiGroups: [""] # Requerido - "" -> Apis de recursos básicos como Pods, Services, ConfigMaps, Secrets, Namespaces, etc.
  resources: ["pods", "services"]  # Requerido (Similar a servicios de AWS como EC2, S3, RDS, etc.)
  verbs: ["get", "list", "watch"]  #  Requerido, permisos asignados (Similar a las IAM Actions, como ec2:DescribeInstances, s3:ListBucket, etc.)

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: python-app-sa
  namespace: default

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: python-app-binding
  namespace: default
subjects:
- kind: ServiceAccount
  name: python-app-sa
  namespace: default
roleRef:
  kind: Role
  name: python-app-role
  apiGroup: rbac.authorization.k8s.io
---
